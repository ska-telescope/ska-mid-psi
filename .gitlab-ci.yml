image: $SKA_K8S_TOOLS_BUILD_DEPLOY

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  MINIKUBE: false
  TANGO_HOST: databaseds-tango-base:10000
  CLUSTER_DOMAIN: cluster.local
  K8S_TIMEOUT: 800s
  DISH_ID: ska001
  DISH_LMC_ENABLED: true
  PST_ENABLED: false
  SPFRX_ENABLED: false
  RUNNER_TAG: k8srunner-psi-mid

stages:
  - lint
  - build
  - deploy
  - on_demand_psi
  - test
  - log-collector
  - join-reports
  - pages
  - publish
  - scan
  - cleanup

include:
  # Python packages build, lint, test and publish
  # - project: 'ska-telescope/templates-repository'
  #   file: 'gitlab-ci/includes/python.gitlab-ci.yml'

  # Helm Charts
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/helm-chart.gitlab-ci.yml'

  # .post step finalisers eg: badges
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'

  # changelog release page
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/changelog.gitlab-ci.yml'

  # deploy steps to psi mid
  - local: "/.gitlab/ci/psi-mid.gitlab-ci.yml"
    
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/xray-publish.gitlab-ci.yml'

  # Docs pages
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/docs-pages.gitlab-ci.yml'

  # .post step finalisers eg: badges
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'

pages:
  rules:
    - when: never

python-test:
  image: $SKA_K8S_TOOLS_BUILD_DEPLOY
  extends:
    - .mid
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"
      when: manual
  needs:
    - job: psi-mid-on-demand-deploy
  tags:
    - $RUNNER_TAG
  before_script:
    - mkdir -p build/reports
    - poetry config virtualenvs.create false
    - poetry install
  script:
    - make python-test KUBE_NAMESPACE=$KUBE_NAMESPACE
  artifacts:
    paths:
      - build/reports/cucumber.json
      - build/reports/report.json
  allow_failure: true

log-collector:
  stage: log-collector
  extends:
    - .mid
  tags:
    - $RUNNER_TAG
  needs:
    - job: python-test
  script:
    - mkdir -p logs
    - POD_LIST=$(kubectl get pods -n $KUBE_NAMESPACE --no-headers -o custom-columns=":metadata.name")
    - for pod in ${POD_LIST[@]}; do echo "kubectl logs $pod -n $KUBE_NAMESPACE --since=3h &> logs/${pod}.log" ; kubectl logs $pod -n $KUBE_NAMESPACE --since=3h &> logs/${pod}.log ; done
  artifacts:
    paths:
    - logs/*.log
  allow_failure: true

xray-publish:
  extends:
    - .mid
  variables:
    DISH_LMC_ENABLED: "$DISH_LMC_ENABLED"
    SPFRX_ENABLED: "$SPFRX_ENABLED"
    PST_ENABLED: "$PST_ENABLED"
  tags:
    - $RUNNER_TAG
  before_script:
    - export FPGA_BITSTREAM_VER=$(kubectl exec -i -n $KUBE_NAMESPACE ds-deployer-deployer-0 -- bash -c "cat src/ska_mid_cbf_engineering_console/deployer/talondx_config/talondx_boardmap.json | python -c \"import sys, json; print(json.load(sys.stdin)['fpga_bitstreams'][0]['version'])\"")
  script:
    - echo "DISH_LMC_ENABLED = ${DISH_LMC_ENABLED}"
    - echo "SPFRX_ENABLED = ${SPFRX_ENABLED}"
    - echo "PST_ENABLED = ${PST_ENABLED}"
    - echo "FPGA_BITSTREAM_VER = ${FPGA_BITSTREAM_VER}"
    - make xray-publish
  dependencies:
    - python-test
    - log-collector
  needs:
    - job: python-test
    - job: log-collector
  rules:
    - exists:
        - build/reports/cucumber.json
        - build/reports/report.json
        - tests/xray-config.json
      when: on_success
