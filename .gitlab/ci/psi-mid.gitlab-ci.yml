.mid:
  variables:
    CONFIG: mid
    HELM_RELEASE: "test-$CI_PIPELINE_ID"
    KUBE_NAMESPACE: "ci-$CI_PROJECT_NAME-$CI_PIPELINE_ID-$GITLAB_USER_LOGIN"
    KUBE_NAMESPACE_SDP: "$KUBE_NAMESPACE-sdp"
    ARCHIVING_ENABLED: false

.deploy:
  stage: deploy
  extends:
    - .mid
  variables:
    K8S_AUTH_NAMESPACES: "$KUBE_NAMESPACE $KUBE_NAMESPACE_SDP"
    K8S_AUTH_SERVICE_ACCOUNT: "ci-svc-psi-$CI_PIPELINE_ID"
    VALUES: values.yaml
  script:
    - echo $CI_JOB_NAME - $CI_JOB_STAGE
    - echo "Deploying using the following arguments:"
    - echo -e "    ARCHIVING_ENABLED = $ARCHIVING_ENABLED\n    DISH_LMC_ENABLED = $DISH_LMC_ENABLED\n    SPFRX_ENABLED = $SPFRX_ENABLED"
    - echo "Make config dump"
    - make vars
    # Override to allow install of dish-lmc, then allow regular instal from chart
    - |
      if [ "$K8S_INSTALL_FROM_CAR" != "true" ]; then
       echo "Install Skampi Charts"
       make k8s-install-chart
      else
        echo "Install Skampi Charts"
        make k8s-install-chart-car
      fi
    - echo "Get namespace resources"
    - make k8s-get
    - echo "Wait namespace resources"
    - make k8s-wait
    - mkdir -p build/reports
    - echo "DISH_LMC_ENABLED=$DISH_LMC_ENABLED" >> build/reports/deployment_variables.txt
    - echo "SPFRX_ENABLED=$SPFRX_ENABLED" >> build/reports/deployment_variables.txt
    - echo "PST_ENABLED=$PST_ENABLED" >> build/reports/deployment_variables.txt
    - echo "ARCHIVING_ENABLED=$ARCHIVING_ENABLED" >> build/reports/deployment_variables.txt
    - cat build/reports/deployment_variables.txt
    - |
      if [ "$ARCHIVING_ENABLED" == "true" ]; then
        echo "Add attributes to EDA for archiving"
        echo "make eda-add-attributes KUBE_NAMESPACE=$KUBE_NAMESPACE"
        make eda-add-attributes KUBE_NAMESPACE=$KUBE_NAMESPACE
        if [ "$DISH_LMC_ENABLED" == "true" ]; then
          echo "And add attributes for Dish.LMC to EDA for archiving"
          make eda-add-attributes KUBE_NAMESPACE=$KUBE_NAMESPACE ARCHIVE_CONFIG="archiver/dish-lmc.yaml"
          if [ "$SPFRX_ENABLED" == "true" ]; then
            echo "And add attributes for SPFRx to EDA for archiving"
            make eda-add-attributes KUBE_NAMESPACE=$KUBE_NAMESPACE ARCHIVE_CONFIG="archiver/spfrx.yaml"
          fi
        fi
      else
        echo "ARCHIVING_ENABLED is false"
      fi
  artifacts:
    paths:
      - build/reports/deployment_variables.txt

.info:
  stage: deploy
  extends:
    - .mid
  variables:
    K8S_CHART: "ska-$CONFIG"
  script:
    - echo "Get namespace resources"
    - make k8s-get
    - echo "Get SDP namespace resources"
    - make k8s-get KUBE_NAMESPACE=${KUBE_NAMESPACE}-sdp
    - make k8s-info
    - make k8s-info KUBE_NAMESPACE=${KUBE_NAMESPACE}-sdp

.cleanup:
  stage: cleanup
  extends:
    - .mid
  variables:
    K8S_CHART: "ska-$CONFIG"
  script: &cleanup_script
    - echo $CI_JOB_NAME - $CI_JOB_STAGE
    - echo "Make config dump" ; make vars
    # TODO: when have time in the future make this work in the redeploy job
    # - ARCHIVING_ENABLED=$(grep '^ARCHIVING_ENABLED=' build/reports/deployment_variables.txt | cut -d'=' -f2)
    # - echo "ARCHIVING_ENABLED = ${ARCHIVING_ENABLED}"
    - |
      if [ "$ARCHIVING_ENABLED" == "true" ]; then
        echo "Remove attributes from being archived in EDA"
        echo "make eda-remove-attributes KUBE_NAMESPACE=${KUBE_NAMESPACE} OUTPUT_FILE=loaded_attributes.yaml"
        make eda-remove-attributes KUBE_NAMESPACE=${KUBE_NAMESPACE} OUTPUT_FILE=loaded_attributes.yaml
      else
        echo "ARCHIVING_ENABLED is false"
    - fi
    - make k8s-uninstall-chart || true
    - |
      if [ "$KEEP_NAMESPACE" != "true" ]; then
        make k8s-delete-namespace
      fi
  # TODO: when have time in the future make this work in the redeploy job
  # dependencies:
  #   - psi-mid-on-demand-deploy
  #   - psi-mid-on-demand-redeploy

.redeploy:
  extends:
    - .deploy
  before_script: *cleanup_script

.psi_mid_on_demand:
  tags:
    - k8srunner-psi-mid
  stage: on_demand_psi
  extends:
    - .mid
  variables:
    VALUES: "values.yml"
    INGRESS_HOST: "INGRESS.IP.ADDRESS"
    SERVICE_ACCOUNT: "ci-svc-psi-$CI_PIPELINE_ID"

psi-mid-on-demand-deploy:
  extends:
    - .deploy
    - .psi_mid_on_demand
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: always
    - if: $CI_PIPELINE_SOURCE != "schedule"
      when: manual
  allow_failure: true
  environment:
    name: psi-mid/ska-$CI_COMMIT_REF_NAME

psi-mid-on-demand-info:
  extends:
    - .info
    - .psi_mid_on_demand
  when: manual

psi-mid-on-demand-destroy:
  stage: cleanup
  extends:
    - .cleanup
    - .psi_mid_on_demand
  when: manual
  environment:
    name: psi-mid/ska-$CI_COMMIT_REF_NAME
    action: stop

psi-mid-on-demand-redeploy:
  when: manual
  extends:
    - .redeploy
    - .psi_mid_on_demand
  environment:
    name: psi-mid/ska-$CI_COMMIT_REF_NAME
